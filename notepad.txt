$a = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
$a = [1=>'пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];

echo '<pre>';
var_dump($a);
echo '</pre>';

abs - функция abs вычисляет модуль числа (то есть из отрицательного делает положительное).
abs(число);

sqrt - функция sqrt находит квадратный корень числа.
sqrt(число);

pow - функция pow возводит число в заданную степень.
pow(число, степень);

round - функция round округляет число по правилам математического округления.
round(число, [сколько знаков оставить в дробной части]);

ceil - функция ceil округляет дробь в большую сторону до целого.
ceil(число);

floor - функция floor округляет дробь в меньшую сторону.
floor(число);

min - функция min находит самое маленькое число из переданных ей параметрами или самое маленькое число среди элементов массива.
min(первое число, второе число....);
min(массив чисел);

max - функция max находит самое большое число из переданных ей параметрами или самое большое число среди элементов массива.
max(первое число, второе число....);
max(массив чисел);

mt_rand - Функция mt_rand генерирует случайное целое число в заданном промежутке.
mt_rand(с какого числа, до какого числа);

Вам также может пригодиться функция mt_getrandmax, которая возвращает наибольшее возможное случайное значение числа. 

////////////////////////////////////////////////////////////
strtolower - функция strtolower преобразовывает строку в нижний регистр.
strtolower(строка);

strtoupper - функция strtoupper преобразовывает строку в верхний регистр.
strtoupper(строка);

ucfirst - функция ucfirst преобразует первый символ строки 
        в верхний регистр. Не работает с кириллицей.
ucfirst(строка);

lcfirst - функция lcfirst преобразует первый символ строки
        в нижний регистр. Не работает с кириллицей.
lcfirst(строка);

ucwords - функция ucwords преобразует первый символ каждого слова
        в строке в верхний регистр. Не работает с кириллицей.
ucwords(строка);

strlen - функция strlen возвращает длину строки 
        (количество символов в строке).
        Данная функция неправильно работает с кириллицей. 
        Используйте функцию mb_strlen (она работает аналогичным образом, 
        но корректно обрабатывает кириллицу).
strlen(строка);

substr - функция substr вырезает и возвращает подстроку из строки.
        Сама строка при этом не изменяется. 
        Нумерация символов строки начинается с нуля.
        Второй параметр может быть отрицательным - в этом случае отсчет 
        начнется с конца строки, при этом последний символ будет 
        иметь номер -1.
        Последний параметр можно не указывать - в этом случае отрезание 
        произойдет до конца строки.
        Данная функция неправильно работает с кириллицей. 
        Используйте функцию mb_substr (она работает аналогичным образом,
        но корректно обрабатывает кириллицу).
substr(строка, откуда, [сколько]);

str_replace -  функция str_replace ищет в строке заданный текст и 
            меняет его на другой.
            Первым параметром функции принимает что меняем, а вторым - 
            на что меняем. Это могут быть две строки или два массива.
            Во втором случае соответствующие элементы одного массива 
            заменятся на соответствующие элементы второго массива 
            (см. примеры).
            Есть также функция str_ireplace, которая делает тоже самое, 
            но без учета регистра.
str_replace(что меняем, на что меняем, где меняем);

strtr - функция strtr осуществляет поиск и замену символов в строке.
        Функция имеет два варианта работы.
        В первом варианте функция принимает массив замен:
        ключами служит то, что мы меняем, 
        а значениями - на что будем менять:
strtr(где меняем, массив замен);

        Во втором варианте функция одним параметром принимает строку 
        с символами, которые будут заменены, а другим параметром строку 
        с символами, на которые будет производится замена.
        Соответствующие символы первой строки будут заменены на 
        соответствующие символы второй строки:
strtr(где меняем, что меняем, на что меняем);

substr_replace - функция substr_replace заменяет указанную часть 
                строки на другую.
substr_replace(где меняем, на что меняем, с какого символа, [сколько символов]);

strpos - функция strpos возвращает позицию первого вхождения подстроки 
        в другую строку. Первым параметром функция принимает строку, 
        в которой осуществляется поиск, вторым параметром - подстроку, 
        которую следует искать. 
strpos(где ищем, что ищем, [откуда искать]);

strstr - функция strstr находит первое вхождение подстроки 
        в строку и возвращает часть строки начиная этого места 
        до конца строки. В отличие от strchr ищет вхождение подстроки 
        из нескольких символов, а не вхождение одного символа.
strstr(где ищем, что ищем);

explode - функция explode разбивает строку в массив по определенному разделителю.
explode(разделитель, строка);

implode - функция implode сливает массив в строку с указанным разделителем.
implode(разделитель, строка);

str_split - функция str_split разбивает строку в массив.
str_split(строка, количество символов в элементе массива);

trim - функция trim удаляет пробелы с начала и конца строки. 
        Может также удалять другие символы, если их указать вторым параметром.
trim(строка);
trim(строка, символы);

ltrim - функция ltrim удаляет пробелы с начала строки.
rtrim - функция rtrim удаляет пробелы с конца строки.

strrev - функция strrev переворачивает строку так, чтобы символы шли в обратном порядке.
strrev(строка);

str_shuffle - функция str_shuffle переставляет символы в строке в случайном порядке.
str_shuffle(cтрока);

number_format - функция number_format позволяет форматировать число.
        Функция принимает один, два или четыре параметра (не три).
number_format(число);
number_format(число, количество знаков дробной части);
number_format(число, количество знаков дробной части, разделитель дробной части, разделитель тысяч);

str_repeat - функция str_repeat повторяет строку заданное количество раз.
str_repeat(строка, сколько раз повторить);

htmlspecialchars - функция htmlspecialchars позволяет вывести теги в 
            браузер так, чтобы он не считал их командами, 
            а выводил как строки.
htmlspecialchars(строка);

strip_tags - функция strip_tags удаляет HTML теги из строки 
            (не трогая их содержимого). 
            Вторым необязательным параметром можно указать 
            разрешенные теги - они не будут удалены. 
            Их указываем в таком формате: '<b>' или '<b><p>', 
            если хотим оставить несколько тегов.
strip_tags(строка, [разрешенные теги]);

chr - функция chr находит символ по его ASCII коду.
chr(код символа);

ord - функция ord возвращает ASCII код символа. Параметром 
        принимает один символ или целую строку 
        (в этом случае возвращает код ее первого символа).

str_word_count - функция str_word_count подсчитывает количество слов в строке.
        Функция может принимать второй необязательный параметр, число 1 или 2.
        Если он не задан, то возвращается целое число, 
        равное количеству слов.
        Если передано 1, то возвращается массив, содержащий все слова, 
        входящие в строку.
        Если передано 2, то возвращается массив, ключами которого являются 
        позиции в строке, а значениями - соответствующие слова.
str_word_count(строка, [число]);

substr_count - функция substr_count подсчитывает 
        сколько раз встречается подстрока в строке.
substr_count(строка, подстрока);

count_chars -  функция count_chars подсчитывает сколько раз встречаются 
        различные символы в строке.
        Первым параметром функция принимает строку, а вторым 
        необязательным параметром - модификатор, который изменяет 
        работу функции:
        0 - массив, индексами которого являются ASCII коды, 
            а значениями - число вхождений соответствующего символа.
        1 - то же, что и для 0, но информация о символах с нулевым числом 
            вхождений не включается в массив.
        2 - то же, что и для 0, но в массив включается информация 
            только о символах с нулевым числом вхождений.
        3 - строка, состоящая из символов, которые входят в исходную 
            строку хотя бы раз.
        4 - строка, состоящая из символов, которые не входят в исходную 
            строку.
        По умолчанию функция ведет себя так, будто второй параметр 
        поставлен в 0.
count_chars(строка, [модификатор]);

strchr - функция strchr находит первое вхождение подстроки в строку 
        и возвращает часть строки начиная этого места до конца строки.
strchr(где ищем, что ищем);

strrchr - функция strrchr находит последнее вхождение символа в строку
        и возвращает часть строки начиная этого места до конца строки.
strrchr(где ищем, что ищем);

////////////////////////////////////////////////////////////
count - подсчитывает количество элементов массива;
count(массив);

in_array - проверяет наличие заданного элемента в массиве;
in_array(что искать, в каком массиве);

array_sum - вычисляет сумму элементов массива;
array_sum(массив);

array_product - вычисляет произведение (умножение) элементов массива;
array_product(массив);

range - создает массив с диапазоном элементов;
range(откуда, докуда, [шаг]);

array_merge - сливает два и более массивов вместе;
array_merge(первый массив, второй массив...);

array_slice - отрезает и возвращает часть массива (не меняет массив);
array_slice(массив, откуда отрезать, [сколько], [сохранять ключи = false]);

array_splice - отрезает и возвращает часть массива (меняет массив);
array_splice(массив, откуда отрезать, [сколько], [вставить взамен]);

array_keys - получает ключи массива и записывает их в новый массив;
array_keys(массив);

array_values - выбирает все значения из массива;
array_values(массив);

array_combine - осуществляет слияние двух массивов в один ассоциативный;
array_combine(массив ключей, массив значений);

array_flip - производит обмен местами ключей и значений массива;
array_flip(массив);

array_reverse - переворачивает массив в обратном порядке;
array_reverse(массив, [сохранять ли ключи]);

array_search - осуществляет поиск значения в массиве и возвращает 
        ключ первого найденного элемента;
array_search(что ищем, где ищем, [сравнивать по типу = false]);

array_replace - заменяет значения первого массива значениями с 
        такими же ключами из других переданных массивов;
array_replace(массив, массив, массив...);

array_count_values - производит подсчет количества всех значений массива;
array_count_values(массив);

Сортировка массивов:
sort - по возрастанию элементов,
rsort - по убыванию элементов, 
asort - по возрастанию элементов с сохранением ключей,
arsort - по убыванию элементов с сохранением ключей,
ksort - по возрастанию ключей, 
krsort - по убыванию ключей, 
usort - по функции по элементам, 
uasort - по функции по элементам с сохранением ключей,
uksort - по функции по ключам,
natsort - натуральная сортировка.

array_rand - возвращает случайный ключ из массива;
array_rand(массив, [сколько ключей выбрать]);

shuffle - 

array_unique - осуществляет удаление повторяющихся элементов (дублей)
        из массива;
array_unique(массив);

array_shift - вырезает и возвращает первый элемент массива. 
        При этом этот элемент исчезает из массива;
array_shift(массив);

array_pop - вырезает и возвращает последний элемент массива.
        При этом этот элемент исчезает из массива.
array_pop(массив);

array_unshift - добавляет элементы в начало массива
array_unshift(массив, какие элементы добавить);

array_push - добавляет элементы в конец массива;
array_push(массив к которому добавить элементы, какие элементы добавить);

array_pad - дополняет массив определенным значением до заданного размера.
array_pad(массив, до какого размера заполнить, чем заполнять);

array_fill - создает массив, заполненный элементами 
        с определенным значением.
array_fill(ключ первого элемента, сколько элементов, чем заполнять);

array_fill_keys - создает массив и заполняет массив элементами 
        с определенным значением так, чтобы весь массив был 
        с одинаковыми элементами, но разными ключами. 
        Ключи берутся из массива, передаваемого первым параметром.
array_fill_keys(ключ первого элемента, сколько элементов, чем заполнять);

array_chunk - разбивает одномерный массив в двухмерный. 
        Первым параметром она принимает массив, 
        а вторым - количество элементов в каждом подмассиве.
array_chunk(массив, по сколько элементов);

array_count_values - производит подсчет количества всех значений массива;
array_count_values(массив);

array_map - применяет заданную функцию ко всем элементам массива
         и возвращает измененный массив;
array_map(имя функции в кавычках, массив, [еще массивы через запятую]);

array_intersect - вычисляет пересечение массивов - возвращает массив
         из элементов, которые есть во всех массивах, переданных в функцию.
array_intersect(массив, массив, массив...);

array_diff - возвращает массив из элементов, которые не являются
         общими для первого массива, переданных в функцию.
array_diff(массив, массив, массив...);


